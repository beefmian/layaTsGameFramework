var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";
/**This class is automatically generated by LayaAirIDE, please do not make any modifications. */
Object.defineProperty(exports, "__esModule", { value: true });
/*
* 游戏初始化配置;
*/
var GameConfig = /** @class */ (function () {
    function GameConfig() {
    }
    GameConfig.init = function () {
        var reg = Laya.ClassUtils.regClass;
    };
    GameConfig.width = 640;
    GameConfig.height = 1136;
    GameConfig.scaleMode = "fixedwidth";
    GameConfig.screenMode = "none";
    GameConfig.alignV = "top";
    GameConfig.alignH = "left";
    GameConfig.startScene = "";
    GameConfig.sceneRoot = "";
    GameConfig.debug = false;
    GameConfig.stat = false;
    GameConfig.physicsDebug = false;
    GameConfig.exportSceneToJson = true;
    return GameConfig;
}());
exports.default = GameConfig;
GameConfig.init();
},{}],2:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var GameConfig_1 = require("./GameConfig");
var SceneConst_1 = require("./game/consts/SceneConst");
var HomeScene_1 = require("./game/scene/HomeScene");
var AppL_1 = require("./core/AppL");
var Main = /** @class */ (function () {
    function Main() {
        //根据IDE设置初始化引擎		
        if (window["Laya3D"])
            Laya3D.init(GameConfig_1.default.width, GameConfig_1.default.height);
        else
            Laya.init(GameConfig_1.default.width, GameConfig_1.default.height, Laya["WebGL"]);
        Laya["Physics"] && Laya["Physics"].enable();
        Laya["DebugPanel"] && Laya["DebugPanel"].enable();
        Laya.stage.scaleMode = GameConfig_1.default.scaleMode;
        Laya.stage.screenMode = GameConfig_1.default.screenMode;
        //兼容微信不支持加载scene后缀场景
        Laya.URL.exportSceneToJson = GameConfig_1.default.exportSceneToJson;
        //打开调试面板（通过IDE设置调试模式，或者url地址增加debug=true参数，均可打开调试面板）
        if (GameConfig_1.default.debug || Laya.Utils.getQueryString("debug") == "true")
            Laya.enableDebugPanel();
        if (GameConfig_1.default.physicsDebug && Laya["PhysicsDebugDraw"])
            Laya["PhysicsDebugDraw"].enable();
        if (GameConfig_1.default.stat)
            Laya.Stat.show();
        Laya.alertGlobalError = true;
        //激活资源版本控制，version.json由IDE发布功能自动生成，如果没有也不影响后续流程
        Laya.ResourceVersion.enable("version.json", Laya.Handler.create(this, this.onVersionLoaded), Laya.ResourceVersion.FILENAME_VERSION);
    }
    Main.prototype.onVersionLoaded = function () {
        //激活大小图映射，加载小图的时候，如果发现小图在大图合集里面，则优先加载大图合集，而不是小图
        Laya.AtlasInfoManager.enable("fileconfig.json", Laya.Handler.create(this, this.onConfigLoaded));
    };
    Main.prototype.onConfigLoaded = function () {
        //加载IDE指定的场景
        // GameConfig.startScene && Laya.Scene.open(GameConfig.startScene);
        AppL_1.default.DebugUtils.isDebug = true;
        AppL_1.default.StageUtils.init();
        //注册场景
        AppL_1.default.SceneManager.register(SceneConst_1.SceneConst.HOME, new HomeScene_1.default());
        this.startGame();
    };
    Main.prototype.startGame = function () {
        AppL_1.default.SceneManager.runScene(SceneConst_1.SceneConst.HOME);
    };
    return Main;
}());
//激活启动类
new Main();
},{"./GameConfig":1,"./core/AppL":3,"./game/consts/SceneConst":33,"./game/scene/HomeScene":37}],3:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/*
* APPL入口
* jhj
* 2018-11-11
* QQ:8510001
*/
var ControllerManager_1 = require("./mvc/ControllerManager");
var EasyLoading_1 = require("./module/loading/EasyLoading");
var MessageCenter_1 = require("./net/MessageCenter");
var DisplayUtils_1 = require("./utils/DisplayUtils");
var FontManager_1 = require("./utils/FontManager");
var ViewManager_1 = require("./mvc/ViewManager");
var SceneManager_1 = require("./mvc/SceneManager");
var StageUtils_1 = require("./utils/StageUtils");
var ClassManager_1 = require("./utils/ClassManager");
var AudioManager_1 = require("./sound/AudioManager");
var ArrayUtils_1 = require("./utils/ArrayUtils");
var CommonUtils_1 = require("./utils/CommonUtils");
var EffectUtils_1 = require("./utils/EffectUtils");
var DateUtils_1 = require("./utils/DateUtils");
var DebugUtils_1 = require("./utils/DebugUtils");
var MathUtils_1 = require("./utils/MathUtils");
var StringUtils_1 = require("./utils/StringUtils");
var RandomUtils_1 = require("./utils/RandomUtils");
var ResourceUtils_1 = require("./utils/ResourceUtils");
var AppL = /** @class */ (function () {
    function AppL() {
    }
    Object.defineProperty(AppL, "ClassManager", {
        /**
         * 生成获取类
         */
        get: function () {
            return ClassManager_1.default.getInstance();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AppL, "FontManager", {
        /**
         * font字体注册
         */
        get: function () {
            return FontManager_1.default.getInstance();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AppL, "ViewManager", {
        /**
         * view控制
         */
        get: function () {
            return ViewManager_1.default.getInstance();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AppL, "SceneManager", {
        /**
         * 场景控制
         */
        get: function () {
            return SceneManager_1.default.getInstance();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AppL, "MessageCenter", {
        /**
         * 消息控制中心
         */
        get: function () {
            return MessageCenter_1.default.getInstance();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AppL, "Socket", {
        /**
         * 游戏socket
         */
        get: function () {
            //  return GameSocket.getInstance();
            return;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AppL, "AudioManager", {
        /**
         * 单例音乐控制类型
         */
        get: function () {
            return AudioManager_1.default.getInstance();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AppL, "ControllerManager", {
        /**
         * 单例获取控制类
         */
        get: function () {
            return ControllerManager_1.default.getInstance();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AppL, "EasyLoading", {
        /**
         * 单例获取protobuf控制类
         */
        // public static get ProtobufManager() {
        //     return ProtobufManager.getInstance();
        // }
        /**
         * 单例获取公共加载旋转界面类
         */
        get: function () {
            return EasyLoading_1.default.getInstance();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AppL, "ArrayUtils", {
        /**
         * 单例获取数组工具类
         */
        get: function () {
            return ArrayUtils_1.default.getInstance();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AppL, "CommonUtils", {
        /**
         * 单例获取其他工具类
         */
        get: function () {
            return CommonUtils_1.default.getInstance();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AppL, "DateUtils", {
        /**
        * 单例获取时间工具类
        */
        get: function () {
            return DateUtils_1.default.getInstance();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AppL, "DebugUtils", {
        /**
         * 单例获取调试工具类
         */
        get: function () {
            return DebugUtils_1.default.getInstance();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AppL, "DisplayUtils", {
        /**
         * 单例获取显示容器工具类
         */
        get: function () {
            return DisplayUtils_1.default.getInstance();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AppL, "EffectUtils", {
        /**
         * 单例获取特效工具类
         */
        get: function () {
            return EffectUtils_1.default.getInstance();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AppL, "MathUtils", {
        /**
         * 单例获取number处理工具类
         */
        get: function () {
            return MathUtils_1.default.getInstance();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AppL, "RandomUtils", {
        /**
         * 单例获取随机工具类
         */
        get: function () {
            return RandomUtils_1.default.getInstance();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AppL, "ResourceUtils", {
        /**
         * 单例获取加载工具类，注：所有加载都通过这个加载
         */
        get: function () {
            return ResourceUtils_1.default.getInstance();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AppL, "StageUtils", {
        /**
         * 单例获取舞台工具类（包含：舞台初始化、舞台宽高获取等）
         */
        get: function () {
            return StageUtils_1.default.getInstance();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AppL, "StringUtils", {
        /**
         * 单例获取字符串工具类
         */
        get: function () {
            return StringUtils_1.default.getInstance();
        },
        enumerable: true,
        configurable: true
    });
    return AppL;
}());
exports.default = AppL;
},{"./module/loading/EasyLoading":7,"./mvc/ControllerManager":8,"./mvc/SceneManager":9,"./mvc/ViewManager":10,"./net/MessageCenter":16,"./sound/AudioManager":17,"./utils/ArrayUtils":18,"./utils/ClassManager":19,"./utils/CommonUtils":20,"./utils/DateUtils":21,"./utils/DebugUtils":22,"./utils/DisplayUtils":23,"./utils/EffectUtils":24,"./utils/FontManager":25,"./utils/MathUtils":27,"./utils/RandomUtils":28,"./utils/ResourceUtils":29,"./utils/StageUtils":30,"./utils/StringUtils":31}],4:[function(require,module,exports){
"use strict";
/**
 * 获取一个单例
 * by jhj
 * 2018-11-11
 * QQ:8510001
 **/
Object.defineProperty(exports, "__esModule", { value: true });
var BaseClass = /** @class */ (function () {
    function BaseClass() {
    }
    /**
     * 获取一个单例
     * @returns {any}
     */
    BaseClass.getInstance = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        var Class = this;
        if (!Class._instance) {
            var argsLen = args.length;
            switch (argsLen) {
                case 0:
                    Class._instance = new Class();
                    break;
                case 1:
                    Class._instance = new Class(args[0]);
                    break;
                case 2:
                    Class._instance = new Class(args[0], args[1]);
                    break;
                case 3:
                    Class._instance = new Class(args[0], args[1], args[2]);
                    break;
                case 4:
                    Class._instance = new Class(args[0], args[1], args[2], args[3]);
                    break;
                case 5:
                    Class._instance = new Class(args[0], args[1], args[2], args[3], args[4]);
                    break;
                case 6:
                    Class._instance = new Class(args[0], args[1], args[2], args[3], args[4], args[5]);
                    break;
            }
        }
        return Class._instance;
    };
    return BaseClass;
}());
exports.default = BaseClass;
},{}],5:[function(require,module,exports){
"use strict";
/**
 * Sprite
 * jhj
 * 2018-11-11
 * QQ:8510001
 **/
Object.defineProperty(exports, "__esModule", { value: true });
var BaseSprite = /** @class */ (function (_super) {
    __extends(BaseSprite, _super);
    function BaseSprite() {
        return _super.call(this) || this;
    }
    /**
     * 添加子对象，如果该view被摧毁不添加
     */
    // addChild(node: Node) {
    //     if (this.destroyed)
    //         return;
    //     super.addChild(node);
    // }
    /**
     * 获取单例
     */
    BaseSprite.getInstance = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        var Class = this;
        if (!Class._instance) {
            var argsLen = args.length;
            switch (argsLen) {
                case 0:
                    Class._instance = new Class();
                    break;
                case 1:
                    Class._instance = new Class(args[0]);
                    break;
                case 2:
                    Class._instance = new Class(args[0], args[1]);
                    break;
                case 3:
                    Class._instance = new Class(args[0], args[1], args[2]);
                    break;
                case 4:
                    Class._instance = new Class(args[0], args[1], args[2], args[3]);
                    break;
                case 5:
                    Class._instance = new Class(args[0], args[1], args[2], args[3], args[4]);
                    break;
                case 6:
                    Class._instance = new Class(args[0], args[1], args[2], args[3], args[4], args[5]);
                    break;
            }
        }
        return Class._instance;
    };
    return BaseSprite;
}(Laya.Sprite));
exports.default = BaseSprite;
},{}],6:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * 资源const
 * by jhj
 * 2018-11-11
 * QQ:8510001
 **/
var ResourceType = /** @class */ (function () {
    function ResourceType() {
    }
    ResourceType.PNG = "png";
    ResourceType.JPG = "jpg";
    ResourceType.SK = "sk";
    ResourceType.FNT = "fnt";
    ResourceType.TXT = "txt";
    ResourceType.JSON = "json";
    ResourceType.MP4 = "mp4";
    ResourceType.MP3 = "mp3";
    ResourceType.WAV = "wav";
    return ResourceType;
}());
exports.default = ResourceType;
},{}],7:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var AppL_1 = require("../../AppL");
var BaseClass_1 = require("../../base/BaseClass");
var ResourceType_1 = require("../../consts/ResourceType");
/**
 * 动态加载类
 * by jhj
 * 2018-11-11
 * QQ:8510001
 **/
var EasyLoading = /** @class */ (function (_super) {
    __extends(EasyLoading, _super);
    function EasyLoading() {
        var _this = _super.call(this) || this;
        _this.content = null;
        _this.uiBg = null;
        _this.uiImageContainer = null;
        _this.initView();
        return _this;
    }
    /**
     * 显示加载旋转界面
     */
    EasyLoading.prototype.show = function () {
        AppL_1.default.StageUtils.stage.addChild(this.content);
        this.onResize();
        Laya.timer.clearAll(this);
        Laya.timer.loop(200, this, this.enterFrame);
        AppL_1.default.StageUtils.stage.on(Laya.Event.RESIZE, this, this.onResize);
    };
    /**
     * 关闭加载旋转界面
     */
    EasyLoading.prototype.close = function () {
        AppL_1.default.StageUtils.stage.off(Laya.Event.RESIZE, this, this.onResize);
        Laya.timer.clearAll(this);
        if (this.content) {
            this.uiBg.graphics.clear();
            this.uiImageContainer.rotation = 0;
            this.content.removeSelf();
        }
    };
    /**
     * 更新背景黑色
     */
    EasyLoading.prototype.initBG = function () {
        var _width = AppL_1.default.StageUtils.stageW;
        var _height = AppL_1.default.StageUtils.stageH;
        this.uiBg.graphics.clear();
        this.uiBg.graphics.drawRect(0, 0, _width, _height, "#000000");
        this.uiBg.size(_width, _height);
        this.content.size(_width, _height);
    };
    /**
     * 旋转
     */
    EasyLoading.prototype.enterFrame = function () {
        var rota = this.uiImageContainer.rotation + 30;
        rota = rota % 360;
        this.uiImageContainer.rotation = rota;
    };
    /**
     * 适配
     */
    EasyLoading.prototype.onResize = function () {
        this.initBG();
        this.uiImageContainer.pos(this.uiBg.width >> 1, this.uiBg.height >> 1);
    };
    EasyLoading.prototype.initView = function () {
        var self = this;
        self.content = AppL_1.default.DisplayUtils.createSprite(0, 0, null);
        self.content.mouseEnabled = true;
        self.uiBg = AppL_1.default.DisplayUtils.createSprite(0, 0, self.content);
        self.uiBg.alpha = 0.4;
        self.uiImageContainer = AppL_1.default.DisplayUtils.createSprite(0, 0, self.content);
        var url = AppL_1.default.ResourceUtils.getUrl("res/loading", "load_Reel", ResourceType_1.default.PNG);
        AppL_1.default.DisplayUtils.imageUrlLoad(url, function () {
            var img = AppL_1.default.DisplayUtils.createImage(0, 0, url, self.uiImageContainer);
            img.pivot(img.width >> 1, img.height >> 1);
        }, null);
    };
    return EasyLoading;
}(BaseClass_1.default));
exports.default = EasyLoading;
},{"../../AppL":3,"../../base/BaseClass":4,"../../consts/ResourceType":6}],8:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Logger_1 = require("../utils/Logger");
var BaseClass_1 = require("../base/BaseClass");
/**
 * Controller管理类
 *  by jhj
 * 2018-11-11
 * QQ:8510001
 */
var ControllerManager = /** @class */ (function (_super) {
    __extends(ControllerManager, _super);
    /**
     * 构造函数
     */
    function ControllerManager() {
        var _this = _super.call(this) || this;
        _this._modules = {};
        return _this;
    }
    /**
     * 清空处理
     */
    ControllerManager.prototype.clearAll = function () {
        this._modules = {};
    };
    /**
     * 动态添加的Controller
     * @param {any} controllerKey 唯一标识
     * @param {BaseController} controller
     */
    ControllerManager.prototype.register = function (controllerKey, controller) {
        if (this.isExists(controllerKey))
            return;
        this._modules[controllerKey] = controller;
    };
    /**
     * 动态移除Controller
     * @param {any} controllerKey 唯一标识
     */
    ControllerManager.prototype.unregister = function (controllerKey) {
        if (!this.isExists(controllerKey))
            return;
        this._modules[controllerKey] = null;
        delete this._modules[controllerKey];
    };
    /**
     * 是否已经存在Controller
     * @param {any} controllerKey 唯一标识
     * @return {Boolean}
     */
    ControllerManager.prototype.isExists = function (controllerKey) {
        return !!this._modules[controllerKey];
    };
    /**
     * 跨模块消息传递
     * @param {any} controllerKey Controller唯一标识
     * @param {any} key 消息唯一标识
     * @param ...param:any[]
     */
    ControllerManager.prototype.dispatchController = function (controllerKey) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        var controller = this._modules[controllerKey];
        if (controller) {
            return controller.dispatch.apply(controller, args);
        }
        else {
            Logger_1.default.trace("模块" + controllerKey + "不存在");
            return null;
        }
    };
    /**
     * 获取指定Controller的Model对象
     * @param {any} controllerKey Controller唯一标识
     * @returns {BaseModel}
     */
    ControllerManager.prototype.getControllerModel = function (controllerKey) {
        var manager = this._modules[controllerKey];
        if (manager) {
            return manager.getModel();
        }
        return null;
    };
    /**
     * 获取指定Controller对象
     * @param {any} controllerKey Controller唯一标识
     * @returns {BaseController}
     */
    ControllerManager.prototype.getController = function (controllerKey) {
        var controller = this._modules[controllerKey];
        if (controller) {
            return controller;
        }
        return null;
    };
    return ControllerManager;
}(BaseClass_1.default));
exports.default = ControllerManager;
},{"../base/BaseClass":4,"../utils/Logger":26}],9:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Logger_1 = require("../utils/Logger");
var BaseClass_1 = require("../base/BaseClass");
/*
 * Scene基类接口
 * jhj
 * 2018-11-11
 * QQ:8510001
*/
var SceneManager = /** @class */ (function (_super) {
    __extends(SceneManager, _super);
    function SceneManager() {
        var _this = _super.call(this) || this;
        //所有注册场景
        _this._scenes = {};
        //当前显示场景
        _this._currScene = null;
        return _this;
    }
    /**
     * 清空处理
     * @param {any} key Scene唯一标识
     */
    SceneManager.prototype.clear = function (key) {
        var scene = this._scenes[key];
        if (scene) {
            if (scene == this._currScene) {
                scene.onExit();
                this._currScene = null;
            }
            delete this._scenes[key];
        }
    };
    /**
     * 清理所有
     */
    SceneManager.prototype.clearAll = function () {
        if (this._currScene) {
            this._currScene.onExit();
            this._currScene = null;
        }
        this._scenes = {};
    };
    /**
     * 注册Scene
     * @param {any} key Scene唯一标识
     * @param {BaseScene} scene Scene对象
     */
    SceneManager.prototype.register = function (key, scene) {
        this._scenes[key] = scene;
    };
    /**
     * 注销Scene
     * @param {any} key Scene唯一标识
     */
    SceneManager.prototype.unregister = function (key) {
        if (this._scenes && this._scenes[key]) {
            delete this._scenes[key];
        }
    };
    /**
     * 切换场景
     * @param {any} key 场景唯一标识
     */
    SceneManager.prototype.runScene = function (key) {
        var nowScene = this._scenes[key];
        if (!nowScene) {
            Logger_1.default.trace("场景" + key + "不存在");
            return;
        }
        if (this._currScene) {
            this._currScene.onExit();
        }
        nowScene.onEnter();
        this._currScene = nowScene;
    };
    /**
     * 获取当前Scene
     * @returns {any}
     */
    SceneManager.prototype.getCurrScene = function () {
        return this._currScene;
    };
    /**
     * 获取scene
     * @param key 场景唯一标识
     */
    SceneManager.prototype.getScene = function (key) {
        var scene = this._scenes[key];
        if (scene) {
            return scene;
        }
        Logger_1.default.trace(key + "场景不存在！");
        return null;
    };
    return SceneManager;
}(BaseClass_1.default));
exports.default = SceneManager;
},{"../base/BaseClass":4,"../utils/Logger":26}],10:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Logger_1 = require("../utils/Logger");
var BaseClass_1 = require("../base/BaseClass");
/*
 * View基类接口
 * jhj
 * 2018-11-11
 * QQ:8510001
*/
var ViewManager = /** @class */ (function (_super) {
    __extends(ViewManager, _super);
    function ViewManager() {
        var _this = _super.call(this) || this;
        _this._views = {};
        return _this;
    }
    /**
     * 注册View
     * @param viewKey
     * @param view
     */
    ViewManager.prototype.register = function (viewKey, view) {
        if (this.isExists(viewKey))
            return;
        this._views[viewKey] = view;
    };
    /**
     * 注销View
     * @param viewKey
     */
    ViewManager.prototype.unregister = function (viewKey) {
        if (!this.isExists(viewKey))
            return;
        this._views[viewKey] = null;
        delete this._views[viewKey];
    };
    /**
     * 摧毁view
     * @param viewKey
     */
    ViewManager.prototype.destroy = function (viewKey) {
        if (!this.isExists(viewKey))
            return;
        var view = this._views[viewKey];
        delete this._views[viewKey];
        view.close();
        view.destroy();
    };
    /**
     * 控制显示view
     * @param {any} viewKey view唯一标识
     * @param {BaseScene} scene 显示的主场景
     * @param ...args:any[]
     */
    ViewManager.prototype.show = function (viewKey, scene) {
        if (scene === void 0) { scene = null; }
        var args = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            args[_i - 2] = arguments[_i];
        }
        if (!this.isExists(viewKey)) {
            Logger_1.default.trace("View " + viewKey + "不存在");
            return;
        }
        //发送参数到view中
        var params = [scene];
        params = params.concat(args);
        var view = this._views[viewKey];
        view.show.apply(view, params);
    };
    /**
     * 控制关闭view
     * @param {any} viewKey view唯一标识
     */
    ViewManager.prototype.close = function (viewKey) {
        if (!this.isExists(viewKey)) {
            Logger_1.default.trace("View " + viewKey + "不存在");
            return;
        }
        var view = this._views[viewKey];
        view.close();
    };
    /**
     * 是否已经存在View
     * @param {any} viewKey 唯一标识
     * @return {boolean}
     */
    ViewManager.prototype.isExists = function (viewKey) {
        return !!this._views[viewKey];
    };
    /**
     * 获取指定View对象
     * @param {any} viewKey View唯一标识
     * @returns {BaseView}
     */
    ViewManager.prototype.getView = function (viewKey) {
        var view = this._views[viewKey];
        if (view) {
            return view;
        }
        return null;
    };
    return ViewManager;
}(BaseClass_1.default));
exports.default = ViewManager;
},{"../base/BaseClass":4,"../utils/Logger":26}],11:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var AppL_1 = require("../../AppL");
var Logger_1 = require("../../utils/Logger");
/**
 * Controller基类
 *  by jhj
 * 2018-11-11
 * QQ:8510001
 */
var BaseController = /** @class */ (function () {
    function BaseController() {
        this._messages = {};
        this._model = null;
        this._messages = {};
    }
    /**
     * 注册本模块消息
     * @param {any} key 唯一标识
     * @param {Function} callback 侦听函数
     * @param {any} thisObj 侦听函数所属对象
     */
    BaseController.prototype.addListener = function (key, callback, thisObj) {
        this._messages[key] = [callback, thisObj];
    };
    /**
     * 注销本模块消息
     * @param {any} key 唯一标识
     */
    BaseController.prototype.removeListener = function (key) {
        if (this._messages && this._messages[key]) {
            delete this._messages[key];
        }
    };
    /**
     * 触发本模块消息
     * @param {any} key 唯一标识
     * @param ...args:any[]
     */
    BaseController.prototype.dispatch = function (key) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        var listen = this._messages[key];
        if (listen) {
            return listen[0].apply(listen[1], args);
        }
        else {
            Logger_1.default.trace("消息" + key + "不存在侦听");
            return null;
        }
    };
    /**
    * 触发其他模块消息
    * @param {any} controllerKey 模块标识
    * @param {any} key 唯一标识
    * @param ...param:any[]
    */
    BaseController.prototype.dispatchController = function (controllerKey, key) {
        return AppL_1.default.ControllerManager.dispatchController.apply(AppL_1.default.ControllerManager, arguments);
    };
    /**
     * 设置该模块使用的Model对象
     * @param {BaseModel} model
     */
    BaseController.prototype.setModel = function (model) {
        this._model = model;
    };
    /**
     * 获取该模块的Model对象
     * @returns {BaseModel}
     */
    BaseController.prototype.getModel = function () {
        return this._model;
    };
    /**
     * 获取指定Controller的Model对象
     * @param {any} controllerKey Controller唯一标识
     * @returns {BaseModel}
     */
    BaseController.prototype.getControllerModel = function (controllerKey) {
        return AppL_1.default.ControllerManager.getControllerModel(controllerKey);
    };
    return BaseController;
}());
exports.default = BaseController;
},{"../../AppL":3,"../../utils/Logger":26}],12:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var AppL_1 = require("../../AppL");
/**
 * Proxy基类
 * by jhj
 * 2018-11-11
 * QQ:8510001
 */
var BaseProxy = /** @class */ (function () {
    /**
     * 构造函数
     * @param $controller 所属模块
     */
    function BaseProxy($controller) {
        this._controller = $controller;
    }
    /**
     * 触发本模块消息
     * @param {any} key 唯一标识
     * @param ...args:any[]
     */
    BaseProxy.prototype.dispatch = function (key) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        return this._controller.dispatch.apply(this._controller, arguments);
    };
    /**
     * 触发其他模块消息
     * @param {number} controllerKey 模块标识
     * @param {any} key 唯一标识
     * @param ...param:any[]
     */
    BaseProxy.prototype.dispatchController = function (controllerKey, key) {
        return this._controller.dispatchController.apply(this._controller, arguments);
    };
    /**
     * 注册从服务器返回消息的监听
     * @param {any} cmd 消息标识
     * @param {Function} callback 处理函数
     * @param {any} thisObj 处理函数所属对象
     */
    BaseProxy.prototype.addListener = function (cmd, callback, thisObj) {
        AppL_1.default.MessageCenter.addListener(cmd, callback, thisObj);
    };
    /**
     * 注册从服务器返回消息的监听，仅一次，执行完成后删除
     * @param {string} cmd 消息标识
     * @param {Function} callbackFunc 处理函数
     * @param {any} callbackObj 处理函数所属对象
     */
    BaseProxy.prototype.addListenerOnce = function (cmd, callbackFunc, callbackObj) {
        var callback = function () {
            this.removeListener(cmd, callback, this);
            callbackFunc.apply(callbackObj, arguments);
        };
        this.addListener(cmd, callback, this);
    };
    /**
     * 移除服务端返回消息的监听
     * @param {string} cmd 消息标识
     * @param {Function} callbackFunc 处理函数
     * @param {any} callbackObj 处理函数所属对象
     */
    BaseProxy.prototype.removeListener = function (cmd, callbackFunc, callbackObj) {
        AppL_1.default.MessageCenter.removeListener(cmd, callbackFunc, callbackObj);
    };
    /**
     * 发送消息到Socket服务器
     * @param {string} cmd 指令
     * @param {Object} msg 消息参数内容
     */
    BaseProxy.prototype.sendSocketMsg = function (cmd, msg) {
        //  AppL.Socket.post(cmd, msg);
    };
    /**
     * 发送消息到Http服务端
     * @param {string} cmd 消息标识 例如: User.login
     * @param {Object} msg 消息参数 例如: let msg:any = {"uName":uName, "uPass":uPass};
     */
    BaseProxy.prototype.sendHttpMsg = function (cmd, msg) {
    };
    return BaseProxy;
}());
exports.default = BaseProxy;
},{"../../AppL":3}],13:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var AppL_1 = require("../../AppL");
var BaseSprite_1 = require("../../base/BaseSprite");
/*
 * BaseScene
 * by jhj
 * 2018-11-11
 * QQ:8510001
*/
var BaseScene = /** @class */ (function (_super) {
    __extends(BaseScene, _super);
    function BaseScene(type) {
        var _this = _super.call(this) || this;
        _this._type = type;
        _this._views = [];
        return _this;
    }
    /**
     * 进入Scene调用
     */
    BaseScene.prototype.onEnter = function () {
        AppL_1.default.StageUtils.stage.addChild(this);
    };
    /**
     * 退出Scene调用
     */
    BaseScene.prototype.onExit = function () {
        this.removeAllView();
        this.removeSelf();
    };
    /**
     * 添加一个view到舞台
     * @param {Laya.Sprite} view
     */
    BaseScene.prototype.addView = function (view) {
        if (this.destroyed)
            return;
        var index = this._views.indexOf(view);
        if (index == -1) {
            var layer = view.getLayer();
            var len = this.numChildren;
            var currentView = void 0;
            for (var i = 0; i < len; i++) {
                currentView = this.getChildAt(i);
                if (currentView.getLayer() > layer) {
                    this._views.splice(i, 0, view);
                    this.addChildAt(view, this.getChildIndex(currentView));
                    return;
                }
            }
            this._views.push(view);
            this.addChild(view);
        }
    };
    /**
     * 在舞台移除一个view
     * @param {Laya.Sprite} view
     */
    BaseScene.prototype.removeView = function (view) {
        var index = this._views.indexOf(view);
        if (index != -1) {
            this._views.splice(index, 1);
        }
        view.removeSelf();
    };
    /**
     * 移除所有view
     */
    BaseScene.prototype.removeAllView = function () {
        while (this.numChildren) {
            this.getChildAt(0).removeSelf();
        }
        this._views = [];
    };
    /**
     * 获取场景类型
     */
    BaseScene.prototype.getType = function () {
        return this._type;
    };
    return BaseScene;
}(BaseSprite_1.default));
exports.default = BaseScene;
},{"../../AppL":3,"../../base/BaseSprite":5}],14:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var AppL_1 = require("../../AppL");
var BaseSprite_1 = require("../../base/BaseSprite");
var ViewType_1 = require("./ViewType");
/*
 * View基类接口
 * by jhj
 * 2018-11-11
 * QQ:8510001
*/
var BaseView = /** @class */ (function (_super) {
    __extends(BaseView, _super);
    /**
     * 构造函数
     * @param {BaseController} controller
     * @param {BaseScene} scene
     */
    function BaseView(controller, scene) {
        if (scene === void 0) { scene = AppL_1.default.StageUtils.stage; }
        var _this = _super.call(this) || this;
        _this._controller = controller;
        _this._scene = scene;
        _this._isInit = false;
        _this._resouce = null;
        //初始化这个view需要的资源
        _this.initRes();
        return _this;
    }
    /**
     * 触发本模块消息
     * @param {any} key 唯一标识
     * @param ...args:any[]
     */
    BaseView.prototype.dispatch = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        return this._controller.dispatch.apply(this._controller, args);
    };
    /**
     * 触发其他模块消息
     * @param {number} controllerKey 模块标识
     * @param {any} key 唯一标识
     * @param ...args:any[]
     */
    BaseView.prototype.dispatchController = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        return this._controller.dispatchController.apply(this._controller, args);
    };
    /**
     * 子类继承必须实现，赋值加载资源
     * @param [{url: , type: }]
     */
    BaseView.prototype.initRes = function () {
    };
    /**
     * 对面板进行显示初始化，用于子类继承
     */
    BaseView.prototype.initView = function () {
    };
    /**
     * 对面板数据的初始化，用于子类继承
     */
    BaseView.prototype.initData = function () {
    };
    /**
     * 面板开启执行函数，用于子类继承
     * @param {BaseScene} scene 场景如果不需要更换指定场景，传值为null
     * @param {boolean} center 居中处理
     * @param ...param:any[]
     */
    BaseView.prototype.show = function (scene, center) {
        if (scene === void 0) { scene = null; }
        if (center === void 0) { center = false; }
        //该view界面居中情况
        if (center) {
            this.x = (AppL_1.default.StageUtils.stageW - this.width) / 2;
            this.y = (AppL_1.default.StageUtils.stageH - this.height) / 2;
        }
        if (scene) {
            this.scene = scene;
        }
        if (this.scene) {
            this.scene.addView(this);
        }
        //resize尺寸变化监听事件
        this.onResize();
        AppL_1.default.StageUtils.stage.on(Laya.Event.RESIZE, this, this.onResize);
    };
    /**
     * 面板关闭执行函数，用于子类继承
     * @param ...args:any[]
     */
    BaseView.prototype.close = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        if (this.scene) {
            this.scene.removeView(this);
        }
        else {
            this.removeSelf();
        }
        AppL_1.default.StageUtils.stage.off(Laya.Event.RESIZE, this, this.onResize);
    };
    /**
     * 屏幕尺寸变化时调用
     */
    BaseView.prototype.onResize = function () {
    };
    /**
     * 获取view窗口级别
     */
    BaseView.prototype.getLayer = function () {
        return ViewType_1.default.LAYER_WINDOW;
    };
    /**
     * 加载面板所需资源
     * @param {Function} callback
     * @param {any} thisObj
     */
    BaseView.prototype.loadResource = function (callback, thisObj) {
        var _this = this;
        if (!this.resouce || this.resouce.length <= 0) {
            return;
        }
        AppL_1.default.EasyLoading.show();
        if (!this.isInit) {
            AppL_1.default.ResourceUtils.loadResource(this.resouce, function () {
                _this.isInit = true;
                _this.initView();
                AppL_1.default.EasyLoading.close();
                (callback) && (callback.call(thisObj));
            }, null, null);
        }
        else {
            AppL_1.default.EasyLoading.close();
            (callback) && (callback.call(thisObj));
        }
    };
    /**
     * 摧毁
     */
    BaseView.prototype.destroy = function (isDesChild) {
        if (isDesChild === void 0) { isDesChild = true; }
        this._isInit = false;
        this._resouce = null;
        this._controller = null;
        this._scene = null;
        AppL_1.default.StageUtils.stage.off(Laya.Event.RESIZE, this, this.onResize);
        _super.prototype.destroy.call(this, isDesChild);
    };
    Object.defineProperty(BaseView.prototype, "isInit", {
        /**
         * 获取设置是否初始化
         */
        get: function () {
            return this._isInit;
        },
        set: function (value) {
            this._isInit = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BaseView.prototype, "resouce", {
        /**
         * 获取设置是否初始化
         */
        get: function () {
            return this._resouce;
        },
        set: function (value) {
            this._resouce = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BaseView.prototype, "scene", {
        /**
         * 获取view界面场景
         */
        get: function () {
            return this._scene;
        },
        set: function (value) {
            this._scene = value;
        },
        enumerable: true,
        configurable: true
    });
    return BaseView;
}(BaseSprite_1.default));
exports.default = BaseView;
},{"../../AppL":3,"../../base/BaseSprite":5,"./ViewType":15}],15:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/*
 * ViewType
 * by jhj
 * 2018-11-11
 * QQ:8510001
*/
var ViewType = /** @class */ (function () {
    function ViewType() {
    }
    /**层次级别，变量值越大view层级越高*/
    ViewType.LAYER_FIX = 0;
    ViewType.LAYER_WINDOW = 1;
    ViewType.LAYER_MWINDOW = 2;
    ViewType.LAYER_TOP = 3;
    return ViewType;
}());
exports.default = ViewType;
},{}],16:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var AppL_1 = require("../AppL");
var Logger_1 = require("../utils/Logger");
var BaseClass_1 = require("../base/BaseClass");
/*
* Message基类
* jhj
* 2018-11-11
* QQ:8510001
*/
var MessageCenter = /** @class */ (function (_super) {
    __extends(MessageCenter, _super);
    function MessageCenter() {
        var _this = _super.call(this) || this;
        _this.dict = {};
        return _this;
    }
    /**
     * 清空处理
     */
    MessageCenter.prototype.clear = function () {
        this.dict = {};
    };
    /**
     * 添加消息监听
     * @param {string} cmd 消息唯一标识
     * @param {Function} listener 侦听函数
     * @param {any} listenerObj 侦听函数所属对象
     */
    MessageCenter.prototype.addListener = function (cmd, listener, listenerObj) {
        var arr = this.dict[cmd];
        if (!arr) {
            arr = [];
            this.dict[cmd] = arr;
        }
        //检测是否已经存在
        for (var i = 0, len = arr.length; i < len; i++) {
            if (arr[i][0] == listener && arr[i][1] == listenerObj) {
                Logger_1.default.trace("监听指令和函数都存在！");
                return;
            }
        }
        arr.push([listener, listenerObj]);
    };
    /**
     * 移除消息监听
     * @param {string} cmd 消息唯一标识
     * @param {Function} listener 侦听函数
     * @param {any} listenerObj 侦听函数所属对象
     */
    MessageCenter.prototype.removeListener = function (cmd, listener, listenerObj) {
        var arr = this.dict[cmd];
        if (!arr) {
            return;
        }
        for (var i = 0, len = arr.length; i < len; i++) {
            if (arr[i][0] == listener && arr[i][1] == listenerObj) {
                arr.splice(i, 1);
                break;
            }
        }
        if (arr.length == 0) {
            this.dict[cmd] = null;
            delete this.dict[cmd];
        }
    };
    /**
     * 移除cmd消息所有监听
     * @param {string} cmd 消息唯一标识
     */
    MessageCenter.prototype.removeAllListener = function (cmd) {
        var arr = this.dict[cmd];
        if (!arr) {
            return;
        }
        this.dict[cmd] = null;
        delete this.dict[cmd];
    };
    /**
     * 触发消息
     * @param {string} cmd 消息唯一标识
     * @param {any} param 消息参数
     */
    MessageCenter.prototype.dispatch = function (cmd, param) {
        if (!this.dict[cmd]) {
            return;
        }
        var vo = new MessageVo();
        vo.cmd = cmd;
        vo.param = param;
        this.dealMsg(vo);
    };
    /**
     * 处理一条消息
     * @param {MessageVo} msgVo
     */
    MessageCenter.prototype.dealMsg = function (msgVo) {
        var cmd = msgVo.cmd;
        var param = AppL_1.default.CommonUtils.copy(msgVo.param);
        var listeners = this.dict[cmd];
        if (!listeners) {
            return;
        }
        for (var i = 0, len = listeners.length; i < len; i++) {
            var listener = listeners[i];
            listener[0].apply(listener[1], [param]);
        }
        msgVo.destroy();
    };
    return MessageCenter;
}(BaseClass_1.default));
exports.default = MessageCenter;
/**
 * 单条消息
 */
var MessageVo = /** @class */ (function () {
    function MessageVo() {
    }
    MessageVo.prototype.destroy = function () {
        this._cmd = null;
        this._param = null;
    };
    Object.defineProperty(MessageVo.prototype, "cmd", {
        get: function () {
            return this._cmd;
        },
        set: function (value) {
            this._cmd = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MessageVo.prototype, "param", {
        get: function () {
            return this._param;
        },
        set: function (value) {
            this._param = AppL_1.default.CommonUtils.copy(value);
        },
        enumerable: true,
        configurable: true
    });
    return MessageVo;
}());
},{"../AppL":3,"../base/BaseClass":4,"../utils/Logger":26}],17:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var BaseClass_1 = require("../base/BaseClass");
/*
* Audio基类
* jhj
* 2018-11-11
* QQ:8510001
*/
var AudioManager = /** @class */ (function (_super) {
    __extends(AudioManager, _super);
    function AudioManager() {
        var _this = _super.call(this) || this;
        _this._isMute = false;
        _this._isMuteMusic = false;
        _this._isMuteSound = false;
        _this._volumeMusic = 1;
        _this._volumeSound = 1;
        _this._initData();
        _this.save();
        return _this;
    }
    /**
     * 获取初始音乐基础信息，存储在本地浏览器中
     */
    AudioManager.prototype._initData = function () {
        var isMuteMusic = Laya.LocalStorage.getItem(AudioManager.IS_MUTE_MUSIC);
        this._isMuteMusic = isMuteMusic === "true" ? true : false;
        var isMuteSound = Laya.LocalStorage.getItem(AudioManager.IS_MUTE_SOUND);
        this._isMuteSound = isMuteSound === "true" ? true : false;
        var isMute = Laya.LocalStorage.getItem(AudioManager.IS_MUTE);
        this._isMute = isMute === "true" ? true : false;
        var volumeMusic = Laya.LocalStorage.getItem(AudioManager.VOLUME_MUSIC);
        this._volumeMusic = volumeMusic ? parseFloat(volumeMusic) : 1;
        var volumeSound = Laya.LocalStorage.getItem(AudioManager.VOLUME_SOUND);
        this._volumeSound = volumeSound ? parseFloat(volumeSound) : 1;
        Laya.SoundManager.muted = this.isMute;
        Laya.SoundManager.musicMuted = this.isMuteMusic;
        Laya.SoundManager.soundMuted = this.isMuteSound;
        Laya.SoundManager.musicVolume = this.volumeMusic;
        Laya.SoundManager.soundVolume = this.volumeSound;
    };
    /**
     * 销毁一个音乐
     * @param 音乐地址
     */
    AudioManager.prototype.destroySound = function (url) {
        Laya.SoundManager.destroySound(url);
    };
    /**
     * 关闭所有音乐
     */
    AudioManager.prototype.stopAll = function () {
        Laya.SoundManager.stopAll();
    };
    /**
     * 关闭所有音效
     */
    AudioManager.prototype.stopAllSound = function () {
        Laya.SoundManager.stopAllSound();
    };
    /**
     * 关闭所有背景音效
     */
    AudioManager.prototype.stopMusic = function () {
        Laya.SoundManager.stopMusic();
    };
    /**
     * 关闭单个音效
     * @param 音乐地址
     */
    AudioManager.prototype.stopSound = function (url) {
        Laya.SoundManager.stopSound(url);
    };
    /**
     * 播放音效
     */
    AudioManager.prototype.playSound = function (url, loops, complete, soundClass, startTime) {
        if (loops === void 0) { loops = 1; }
        if (complete === void 0) { complete = null; }
        if (soundClass === void 0) { soundClass = null; }
        if (startTime === void 0) { startTime = 0; }
        Laya.SoundManager.playSound(url, loops, complete, soundClass, startTime);
    };
    /**
     * 播放背景音乐
     */
    AudioManager.prototype.playMusic = function (url, loops, complete, startTime) {
        if (loops === void 0) { loops = 0; }
        if (complete === void 0) { complete = null; }
        if (startTime === void 0) { startTime = 0; }
        Laya.SoundManager.playMusic(url, loops, complete, startTime);
    };
    Object.defineProperty(AudioManager.prototype, "volumeMusic", {
        /**
         * 设置获取背景声音大小
         */
        get: function () {
            return this._volumeMusic;
        },
        set: function (value) {
            this._volumeMusic = value;
            Laya.SoundManager.setMusicVolume(value);
            this.save();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AudioManager.prototype, "volumeSound", {
        /**
         * 设置获取音效声音大小
         */
        get: function () {
            return this._volumeSound;
        },
        set: function (value) {
            this._volumeSound = value;
            Laya.SoundManager.setSoundVolume(value);
            this.save();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AudioManager.prototype, "isMuteMusic", {
        /**
         * 设置获取是否静音背景音乐
         */
        get: function () {
            return this._isMuteMusic;
        },
        set: function (value) {
            this._isMuteMusic = value;
            Laya.SoundManager.musicMuted = value;
            this.save();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AudioManager.prototype, "isMuteSound", {
        /**
         * 设置获取是否静音音效音乐
         */
        get: function () {
            return this._isMuteSound;
        },
        set: function (value) {
            this._isMuteSound = value;
            Laya.SoundManager.soundMuted = value;
            this.save();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AudioManager.prototype, "isMute", {
        /**
         * 设置获取是否所有静音
         */
        get: function () {
            return this._isMute;
        },
        set: function (value) {
            this._isMute = value;
            Laya.SoundManager.muted = value;
            this.save();
        },
        enumerable: true,
        configurable: true
    });
    /**
     * 保存数据到本地
     */
    AudioManager.prototype.save = function () {
        Laya.LocalStorage.setItem(AudioManager.IS_MUTE, this.isMute);
        Laya.LocalStorage.setItem(AudioManager.IS_MUTE_MUSIC, this.isMuteMusic);
        Laya.LocalStorage.setItem(AudioManager.IS_MUTE_SOUND, this.isMuteSound);
        Laya.LocalStorage.setItem(AudioManager.VOLUME_MUSIC, this.volumeMusic);
        Laya.LocalStorage.setItem(AudioManager.VOLUME_SOUND, this.volumeSound);
    };
    /**
     * 存储在本地声音有关的设置key（字段字符串）
     * IS_MUTE 是否所有都静音{boolean}
     * IS_MUTE_MUSIC 是否背景音乐静音{boolean}
     * IS_MUTE_SOUND 是否音效静音{boolean}
     * VOLUME_MUSIC 背景音乐音量大小{number}
     * VOLUME_SOUND 音效音量大小{number}
     */
    AudioManager.IS_MUTE = "isMute";
    AudioManager.IS_MUTE_MUSIC = "isMuteMusic";
    AudioManager.IS_MUTE_SOUND = "isMuteSound";
    AudioManager.VOLUME_MUSIC = "volumeMusic";
    AudioManager.VOLUME_SOUND = "volumeSound";
    return AudioManager;
}(BaseClass_1.default));
exports.default = AudioManager;
},{"../base/BaseClass":4}],18:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var BaseClass_1 = require("../base/BaseClass");
/**
* Array工具类
* jhj
* 2018-11-11
* QQ:8510001
*/
var ArrayUtils = /** @class */ (function (_super) {
    __extends(ArrayUtils, _super);
    function ArrayUtils() {
        return _super.call(this) || this;
    }
    /**
     * 遍历操作，目前浏览器基本上支持es6 数组自带forEach方法
     * @param {Array} arr
     * @param {Function} callback
     * @param {any} thisObj
     */
    ArrayUtils.prototype.forEach = function (arr, callback, thisObj) {
        for (var i = 0, len = arr.length; i < len; i++) {
            callback.apply(thisObj, [arr[i], i]);
        }
    };
    /**
     * 打乱数组中的元素
     * @param {Array} arr
     */
    ArrayUtils.prototype.upset = function (arr) {
        var len = arr.length;
        var index;
        var tmp;
        for (var i = len - 1; i >= 0; i--) {
            index = (Math.random() * i) | 0;
            tmp = arr[i];
            arr[i] = arr[index];
            arr[index] = tmp;
        }
    };
    return ArrayUtils;
}(BaseClass_1.default));
exports.default = ArrayUtils;
},{"../base/BaseClass":4}],19:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var BaseClass_1 = require("../base/BaseClass");
/**
* Class工具类
* jhj
* 2018-11-11
* QQ:8510001
*/
var ClassManager = /** @class */ (function (_super) {
    __extends(ClassManager, _super);
    function ClassManager() {
        var _this = _super.call(this) || this;
        //所有缓存类数组
        _this._cache = null;
        return _this;
    }
    /**
     * 触发本模块消息
     * @param {any} Class 唯一标识
     * @param ...param:any[]
     */
    ClassManager.prototype.getClass = function (Class) {
        if (!this._cache) {
            this._cache = [];
        }
        for (var i in this._cache) {
            if (this._cache[i] instanceof Class) {
                return this._cache[i];
            }
        }
        var _cla = this._getClass(arguments);
        this._cache.push(_cla);
        return _cla;
    };
    /**
     * 删除指定类单例
     * @param {any} Class
     */
    ClassManager.prototype.clear = function (Class) {
        if (!this._cache) {
            return;
        }
        for (var i in this._cache) {
            if (this._cache[i] instanceof Class) {
                this._cache.splice(parseInt(i + ""), 1);
                break;
            }
        }
    };
    ClassManager.prototype.clearAll = function () {
        this._cache = null;
    };
    /**
     * 获取类实类对象，传入类实参
     * @param {Array} args ...args
     */
    ClassManager.prototype._getClass = function (args) {
        var params = [];
        for (var i = 1; i < args.length; i++) {
            params[i - 1] = args[i];
        }
        var len = params.length;
        var Class = args[0];
        var _cla = null;
        switch (len) {
            case 0:
                _cla = new Class();
                break;
            case 1:
                _cla = new Class(params[0]);
                break;
            case 2:
                _cla = new Class(params[0], params[1]);
                break;
            case 3:
                _cla = new Class(params[0], params[1], params[2]);
                break;
            case 4:
                _cla = new Class(params[0], params[1], params[2], params[3]);
                break;
            case 5:
                _cla = new Class(params[0], params[1], params[2], params[3], params[4]);
                break;
            case 6:
                _cla = new Class(params[0], params[1], params[2], params[3], params[4], params[5]);
                break;
        }
        return _cla;
    };
    return ClassManager;
}(BaseClass_1.default));
exports.default = ClassManager;
},{"../base/BaseClass":4}],20:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var BaseClass_1 = require("../base/BaseClass");
/**
* Common工具类
* jhj
* 2018-11-11
* QQ:8510001
*/
var CommonUtils = /** @class */ (function (_super) {
    __extends(CommonUtils, _super);
    function CommonUtils() {
        return _super.call(this) || this;
    }
    /**
     * 给字体添加描边
     * @param {Laya.Lable|Laya.Text} lable  文字
     * @param {string} color  表示文本的描边颜色
     * @param {number} width  描边宽度
     */
    CommonUtils.prototype.addLableStrokeColor = function (lable, color, width) {
        lable.strokeColor = color;
        lable.stroke = width;
    };
    /**
     * 深度复制
     * @param {any} obj
     * @return {any}
     */
    CommonUtils.prototype.copy = function (obj) {
        var newObj;
        if (obj instanceof Array) {
            newObj = [];
        }
        else if (obj instanceof Object) {
            newObj = {};
        }
        else {
            return obj;
        }
        var keys = Object.keys(obj);
        for (var i = 0, len = keys.length; i < len; i++) {
            var key = keys[i];
            newObj[key] = this.copy(obj[key]);
        }
        return newObj;
    };
    /**
     * 万字的显示
     * @param {Laya.Lable|Laya.Text} label
     * @param {number} num
     */
    CommonUtils.prototype.labelIsOverLenght = function (label, num) {
        var str = null;
        if (num < 10000) {
            str = num + "";
        }
        else if (num < 10000 * 1000) {
            str = Math.floor(num / 10000).toString() + "万";
        }
        else {
            str = Math.floor(num / 10000000).toString() + "千万";
        }
        label.text = str;
    };
    ;
    /**
     * int64转number
     * @param {any} obj
     * @return {number}
     */
    CommonUtils.prototype.int64ToNumber = function (obj) {
        return parseInt(obj.toString());
    };
    return CommonUtils;
}(BaseClass_1.default));
exports.default = CommonUtils;
},{"../base/BaseClass":4}],21:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var BaseClass_1 = require("../base/BaseClass");
/**
* Date工具类
* jhj
* 2018-11-11
* QQ:8510001
*/
var DateUtils = /** @class */ (function (_super) {
    __extends(DateUtils, _super);
    function DateUtils() {
        return _super.call(this) || this;
    }
    /**
     * 1 格式化时间获取 00:00:00
     * @param {number} 时间戳差
     */
    DateUtils.prototype.formatTime = function (time) {
        var str = "";
        var h = time / 3600;
        h = parseInt(h + "");
        var m = (time - h * 3600) / 60;
        m = parseInt(m + "");
        var s = time - h * 3600 - m * 60;
        s = parseInt(s + "");
        if (h > 0) {
            str += h + ":";
        }
        if (m > 9) {
            str += m + ":";
        }
        else {
            str += "0" + m + ":";
        }
        if (s > 9) {
            str += s + "";
        }
        else {
            str += "0" + s;
        }
        return str;
    };
    ;
    /**
     * 2 使用时间返回所需要的字符串格式"2016年06月12日"
     * @param {number} 时间戳
     * @param {string} 返回格式 "yyyy年MM月dd日"
     * @return {string} 返回指点格式字符串
     * */
    DateUtils.prototype.millisecondsToDate = function (time, fmt) {
        var d = new Date(time);
        var o = {
            "M+": d.getMonth() + 1,
            "d+": d.getDate(),
            "h+": d.getHours(),
            "H+": d.getHours(),
            "m+": d.getMinutes(),
            "s+": d.getSeconds(),
            "q+": Math.floor((d.getMonth() + 3) / 3),
            "S": d.getMilliseconds() //毫秒
        };
        var week = {
            "0": "\u65e5",
            "1": "\u4e00",
            "2": "\u4e8c",
            "3": "\u4e09",
            "4": "\u56db",
            "5": "\u4e94",
            "6": "\u516d"
        };
        if (/(y+)/.test(fmt)) {
            fmt = fmt.replace(RegExp.$1, (d.getFullYear() + "").substr(4 - RegExp.$1.length));
        }
        if (/(E+)/.test(fmt)) {
            fmt = fmt.replace(RegExp.$1, ((RegExp.$1.length > 1) ? (RegExp.$1.length > 2 ? "\u661f\u671f" : "\u5468") : "") + week[d.getDay() + ""]);
        }
        for (var k in o) {
            if (new RegExp("(" + k + ")").test(fmt)) {
                fmt = fmt.replace(RegExp.$1, (RegExp.$1.length == 1) ? (o[k]) : (("00" + o[k]).substr(("" + o[k]).length)));
            }
        }
        return fmt;
    };
    ;
    return DateUtils;
}(BaseClass_1.default));
exports.default = DateUtils;
},{"../base/BaseClass":4}],22:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var BaseClass_1 = require("../base/BaseClass");
/**
* Debug工具类
* jhj
* 2018-11-11
* QQ:8510001
*/
var DebugUtils = /** @class */ (function (_super) {
    __extends(DebugUtils, _super);
    function DebugUtils() {
        var _this = _super.call(this) || this;
        _this._isDebug = null;
        return _this;
    }
    Object.defineProperty(DebugUtils.prototype, "isDebug", {
        get: function () {
            return !!this._isDebug;
        },
        set: function (value) {
            this._isDebug = value;
        },
        enumerable: true,
        configurable: true
    });
    return DebugUtils;
}(BaseClass_1.default));
exports.default = DebugUtils;
},{"../base/BaseClass":4}],23:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var AppL_1 = require("../AppL");
var BaseClass_1 = require("../base/BaseClass");
/**
* Display工具类
* jhj
* 2018-11-11
* QQ:8510001
*/
var DisplayUtils = /** @class */ (function (_super) {
    __extends(DisplayUtils, _super);
    function DisplayUtils() {
        var _this = _super.call(this) || this;
        //templet 缓存池
        _this._templetCache = {};
        return _this;
    }
    /**
     * 创建一个Sprite容器
     * @param {number} xPos x坐标
     * @param {number} yPos y坐标
     * @param {Sprite} parent 父容器
     * @return {Laya.Sprite}
     * */
    DisplayUtils.prototype.createSprite = function (xPos, yPos, parent) {
        if (parent === void 0) { parent = null; }
        var sprite = new Laya.Sprite();
        sprite.pos(xPos, yPos);
        if (parent) {
            parent.addChild(sprite);
        }
        return sprite;
    };
    /**
     * 创建一个文本
     * @param {number} xPos x坐标
     * @param {number} yPos y坐标
     * @param {number} size 字号
     * @param {number} width 文本宽度
     * @param {Sprite} parent 父容器
     * @param {string} color 颜色
     * @param {string} align 字体对齐方式
     * @return {Laya.Text}
     * */
    DisplayUtils.prototype.createText = function (xPos, yPos, size, width, parent, color, align) {
        if (width === void 0) { width = 0; }
        if (parent === void 0) { parent = null; }
        if (color === void 0) { color = "#ffffff"; }
        if (align === void 0) { align = Laya.Stage.ALIGN_CENTER; }
        var text = new Laya.Text();
        text.font = "Microsoft YaHei";
        text.fontSize = size;
        text.pos(xPos, yPos);
        text.wordWrap = true;
        if (width != 0) {
            text.width = width;
        }
        text.align = align;
        text.color = color;
        if (parent) {
            parent.addChild(text);
        }
        return text;
    };
    /**
     * 创建一个位图
     * @param {number} xPos x坐标
     * @param {number} yPos y坐标
     * @param {string} textureUrl 纹理地址
     * @param {Sprite} parent 父容器
     * @return {Laya.Sprite}
     * */
    DisplayUtils.prototype.createBitmap = function (xPos, yPos, textureUrl, parent) {
        if (parent === void 0) { parent = null; }
        var image = new Laya.Sprite();
        if (textureUrl) {
            this.imageToTexture(textureUrl, image);
        }
        image.pos(xPos, yPos);
        if (image.texture) {
            image.size(image.texture.sourceWidth, image.texture.sourceHeight);
        }
        if (parent) {
            parent.addChild(image);
        }
        return image;
    };
    /**
     * 创建一个ui image
     * @param {number} xPos x坐标
     * @param {number} yPos y坐标
     * @param {string} textureUrl 纹理地址
     * @param {Sprite} parent 父容器
     * @return {Laya.Image}
     * */
    DisplayUtils.prototype.createImage = function (xPos, yPos, textureUrl, parent) {
        if (parent === void 0) { parent = null; }
        var image = new Laya.Image();
        if (textureUrl) {
            this.imageToTexture(textureUrl, image);
        }
        image.pos(xPos, yPos);
        if (image.source) {
            image.size(image.source.sourceWidth, image.source.sourceHeight);
        }
        if (parent) {
            parent.addChild(image);
        }
        return image;
    };
    /**
     * 创建一个位图文本
     * @param {number} xPos x坐标
     * @param {number} yPos y坐标
     * @param {string} fontUrl 配置文件
     * @param {string} fontPngUrl 纹理地址
     * @param {string} fontName
     * @param {Sprite} parent 父容器
     * @param {number} width 文本宽度
     * @param {string} textAlign 对齐方式
     * @return {Laya.Text}
     * */
    DisplayUtils.prototype.createBitmapText = function (xPos, yPos, fontUrl, fontPngUrl, fontName, parent, width, align) {
        if (parent === void 0) { parent = null; }
        if (width === void 0) { width = 0; }
        if (align === void 0) { align = Laya.Stage.ALIGN_CENTER; }
        //注册font字体到Text中
        AppL_1.default.FontManager.register(fontUrl, fontPngUrl, fontName);
        var tx = new Laya.Text();
        tx.pos(xPos, yPos);
        if (parent) {
            parent.addChild(tx);
        }
        tx.wordWrap = true;
        tx.font = fontName;
        if (width != 0) {
            tx.width = width;
        }
        if (align) {
            tx.align = align;
        }
        return tx;
    };
    /**创建一个按钮
     * @param {number} xPos x坐标
     * @param {number} yPos y坐标
     * @param {string} textureUrl 纹理地址
     * @param {string} text 文本内容
     * @param {number} labelSize 文本size
     * @param {number} width 宽
     * @param {number} height 高
     * @param {Sprite} parent 父容器
     * @return {Laya.Button}
     * */
    DisplayUtils.prototype.createButton = function (xPos, yPos, textureUrl, text, labelSize, width, height, parent) {
        if (text === void 0) { text = ""; }
        if (labelSize === void 0) { labelSize = null; }
        if (width === void 0) { width = null; }
        if (height === void 0) { height = null; }
        if (parent === void 0) { parent = null; }
        var btn = new Laya.Button(textureUrl, text);
        (height != null) && (btn.height = height);
        (width != null) && (btn.width = width);
        (labelSize != null) && (btn.labelSize = labelSize);
        btn.label = text;
        btn.pos(xPos, yPos);
        if (parent) {
            parent.addChild(btn);
        }
        return btn;
    };
    /**
     * 创建骨骼动画
     * @param {number} xPos x坐标
     * @param {number} yPos y坐标
     * @param {string} skKey 地址key
     * @param {number} type 骨骼类型是否换装：1：换装、0：不换装
     * @param {Sprite} parent 父容器
     */
    DisplayUtils.prototype.createSkeleton = function (xPos, yPos, skKey, type, parent) {
        if (parent === void 0) { parent = null; }
        var templet = this.createTemplet(skKey);
        if (templet) {
            var skeleton = templet.buildArmature(type);
            skeleton.pos(xPos, yPos);
            if (parent) {
                parent.addChild(skeleton);
            }
            return skeleton;
        }
        else {
            console.warn("动画资源未提前加载！");
        }
        return null;
    };
    /**
     * 创建骨骼动画
     * @param {string} skKey 地址key
     * @param {number} 骨骼类型是否换装：1：换装、0：不换装
     * @param {Function} 回调函数
     * @param {any} 回调函数this对象
     */
    DisplayUtils.prototype.createAsynSkeleton = function (skKey, type, callback, thisObj) {
        if (callback === void 0) { callback = null; }
        if (thisObj === void 0) { thisObj = null; }
        var templet = this.createTemplet(skKey);
        if (templet) {
            compleSk();
        }
        else {
            var res = [
                { "type": Laya.Loader.BUFFER, "url": skKey + ".sk" },
                { "type": Laya.Loader.IMAGE, "url": skKey + ".png" }
            ];
            AppL_1.default.ResourceUtils.loadResource(res, compleSk, null, null);
        }
        function compleSk() {
            templet = this.createTemplet(skKey);
            var skeleton = templet.buildArmature(type);
            (callback) && (callback.apply(thisObj, [skeleton]));
        }
    };
    /**
     * 获取templet对象
     * @param {string} key
     */
    DisplayUtils.prototype.createTemplet = function (key) {
        if (!this._templetCache[key]) {
            var templet = new Laya.Templet();
            var pngData = Laya.loader.getRes(key + ".png");
            var skData = Laya.loader.getRes(key + ".sk");
            if (pngData && skData) {
                templet.parseData(pngData, skData);
                this._templetCache[key] = templet;
            }
            else {
                return null;
            }
        }
        return this._templetCache[key];
    };
    /**
     * 地址加载纹理图片
     * @param {string} 纹理地址
     * @param {Function} 回调函数
     * @param {any} 回调函数对象
     */
    DisplayUtils.prototype.imageUrlLoad = function (url, callback, thisObj) {
        var res = [{ "url": url, "type": Laya.Loader.IMAGE }];
        AppL_1.default.ResourceUtils.loadResource(res, callback, null, thisObj);
    };
    /**
     * 给image赋值纹理
     * @param {string} 纹理地址
     * @param {Laya.Image|Laya.Sprite} 显示纹理容器对象
     */
    DisplayUtils.prototype.imageToTexture = function (textureUrl, image) {
        if (image instanceof Laya.Image) {
            image.source = Laya.loader.getRes(textureUrl);
            if (!image.source) {
                this.imageUrlLoad(textureUrl, function () {
                    image.source = Laya.loader.getRes(textureUrl);
                    if (!image.destroyed && image.source) {
                        image.size(image.source.sourceWidth, image.source.sourceHeight);
                    }
                }, null);
            }
        }
        else if (image instanceof Laya.Sprite) {
            image.texture = Laya.loader.getRes(textureUrl);
            if (!image.texture) {
                this.imageUrlLoad(textureUrl, function () {
                    image.texture = Laya.loader.getRes(textureUrl);
                    if (!image.destroyed && image.texture) {
                        image.size(image.texture.sourceWidth, image.texture.sourceHeight);
                    }
                }, null);
            }
        }
    };
    return DisplayUtils;
}(BaseClass_1.default));
exports.default = DisplayUtils;
},{"../AppL":3,"../base/BaseClass":4}],24:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var BaseClass_1 = require("../base/BaseClass");
/**
* Effect工具类
* jhj
* 2018-11-11
* QQ:8510001
*/
var EffectUtils = /** @class */ (function (_super) {
    __extends(EffectUtils, _super);
    function EffectUtils() {
        return _super.call(this) || this;
    }
    /**
     * 类似mac上图标上下抖动的效果
     * @param {Sprite} obj 抖动对象
     * @param {number} initY 要抖动的对象的初始Y值，原始位置
     * @param {Function} callback 抖动动画完成回调函数
     * @param {any} thisObj 回调函数this对象
     */
    EffectUtils.prototype.macIconShake = function (obj, initY, callback, thisObj) {
        //抖动频率[时间，移动距离]，可修改
        var arr = [
            [20, 300],
            [15, 300],
            [10, 300],
            [5, 300]
        ];
        var index = 0;
        toShake();
        function toShake() {
            if (index >= arr.length) {
                (callback) && (callback.apply(thisObj, []));
            }
            else {
                Laya.Tween.to(obj, { "y": initY - arr[index][0] }, arr[index][1], null, Laya.Handler.create(null, function () {
                    Laya.Tween.to(obj, { "y": initY }, arr[index][1], null, Laya.Handler.create(null, function () {
                        ++index;
                        toShake();
                    }));
                }));
            }
        }
    };
    /**
     * 向上移动淡出（弹出框）
     * @param {Sprite} obj 淡出对象
     * @param {number} time 淡出时间
     * @param {Function} ease 淡出函数
     * @param {Function} callback 淡出完成回调函数
     * @param {any} thisObj 回调函数this对象
     * @param {Array} arrData 回调传参
     */
    EffectUtils.prototype.flowOut = function (obj, time, ease, callback, thisObj, arrData) {
        if (time === void 0) { time = 500; }
        if (ease === void 0) { ease = null; }
        if (callback === void 0) { callback = null; }
        if (thisObj === void 0) { thisObj = null; }
        if (arrData === void 0) { arrData = null; }
        if (callback) {
            Laya.Tween.to(obj, { y: obj.y - 150, alpha: 0 }, time, ease, Laya.Handler.create(thisObj, callback, arrData));
        }
        else {
            Laya.Tween.to(obj, { y: obj.y - 150, alpha: 0 }, time, ease, Laya.Handler.create(obj, obj.removeSelf, arrData));
        }
    };
    /**
     * 文本数字增减效果
     * @param {number} startNum 开始数值
     * @param {number} endNum 渐变到的数值
     * @param {Function} callback 淡出完成回调函数
     * @param {any} thisObj 回调函数this对象
     */
    EffectUtils.prototype.flowNum = function (startNum, endNum, callback, thisObj) {
        if (thisObj === void 0) { thisObj = null; }
        var change = Math.abs(endNum - startNum);
        if (change <= 0)
            return;
        var everyChange = change / (endNum - startNum);
        var currNum = startNum;
        var timer = new Laya.Timer();
        timer.loop(30, this, changeFun);
        function changeFun() {
            currNum += everyChange;
            --change;
            if (change < 0) {
                timer.clearAll(this);
                timer = null;
            }
            else {
                callback && callback.apply(thisObj, [currNum]);
            }
        }
    };
    /**
     * 开始闪烁
     * @param {Sprite} obj
     * @param {number} alphaTime 闪烁频率
     */
    EffectUtils.prototype.startFlicker = function (obj, alphaTime) {
        if (alphaTime === void 0) { alphaTime = 700; }
        obj.alpha = 1;
        Laya.Tween.to(obj, { "alpha": 0 }, alphaTime, null, Laya.Handler.create(null, function () {
            Laya.Tween.to(obj, { "alpha": 1 }, alphaTime, null, Laya.Handler.create(this, this.startFlicker, [obj]));
        }.bind(this)));
    };
    /**
     * 停止动画所有动画后容器位置初始化到原位，否则可能出现位置改变的bug
     * @param {Sprite} obj
     * @param {number} xPos
     * @param {number} yPos
     */
    EffectUtils.prototype.stopEffect = function (obj, xPos, yPos) {
        if (xPos === void 0) { xPos = null; }
        if (yPos === void 0) { yPos = null; }
        Laya.Tween.clearAll(obj);
        if (xPos !== null && yPos !== null) {
            obj.pos(xPos, yPos);
        }
    };
    /**
     * 点击放大缩小效果
     * @param {Laya.Sprite}
     * @param {boolean} isChangeXY 如果中心点是锚点不需要修改位置
     */
    EffectUtils.prototype.clickEffect = function (sp, isChangeXY) {
        if (isChangeXY === void 0) { isChangeXY = true; }
        if (!sp)
            return;
        sp.off(Laya.Event.MOUSE_DOWN, this, this.cubicInOutEffect);
        sp.on(Laya.Event.MOUSE_DOWN, this, this.cubicInOutEffect, [sp, isChangeXY]);
    };
    EffectUtils.prototype.clearClickEffect = function (sp) {
        if (!sp)
            return;
        sp.off(Laya.Event.MOUSE_DOWN, this, this.cubicInOutEffect);
    };
    EffectUtils.prototype.cubicInOutEffect = function (sp, isChangeXY) {
        var _this = this;
        if (sp._aniButtonEffect)
            return;
        sp._aniButtonEffect = true;
        var _x = sp.x;
        var _y = sp.y;
        var _scaX = sp.scaleX;
        var _scaY = sp.scaleY;
        var _bigX, _bigY;
        if (!isChangeXY) {
            _bigX = _x - ((sp.width * 0.1) >> 1);
            _bigY = _y - ((sp.height * 0.1) >> 1);
        }
        else {
            _bigX = _x;
            _bigY = _y;
        }
        Laya.Tween.to(sp, { x: _bigX, y: _bigY, scaleX: 1.1 * _scaX, scaleY: 1.1 * _scaY }, 100, null, Laya.Handler.create(this, function () {
            Laya.Tween.to(sp, { x: _x, y: _y, scaleX: _scaX, scaleY: _scaY }, 100, null, Laya.Handler.create(_this, function () {
                if (!sp.destroyed) {
                    sp._aniButtonEffect = false;
                }
            }));
        }));
    };
    return EffectUtils;
}(BaseClass_1.default));
exports.default = EffectUtils;
},{"../base/BaseClass":4}],25:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Logger_1 = require("./Logger");
var BaseClass_1 = require("../base/BaseClass");
/**
* Font工具类
* jhj
* 2018-11-11
* QQ:8510001
*/
var FontManager = /** @class */ (function (_super) {
    __extends(FontManager, _super);
    function FontManager() {
        var _this = _super.call(this) || this;
        //缓存json对象
        _this._fontCache = null;
        return _this;
    }
    /**
     * 注册纹理字体
     * @param {string} fontUrl 配置文件
     * @param {string} fontPngUrl 纹理地址
     * @param {string} fontName
     */
    FontManager.prototype.register = function (fontUrl, fontPngUrl, fontName) {
        if (this._fontCache && this._fontCache[fontName]) {
            return;
        }
        var fontFntData = Laya.Loader.getRes(fontUrl);
        var fontPngData = Laya.Loader.getRes(fontPngUrl);
        if (!fontFntData || !fontPngData) {
            Logger_1.default.trace("注册纹理字体文件未加载！", fontUrl, fontPngUrl);
        }
        var bitmapFont = new Laya.BitmapFont();
        bitmapFont.parseFont(fontFntData, fontPngData);
        Laya.Text.registerBitmapFont(fontName, bitmapFont);
        if (!this._fontCache) {
            this._fontCache = {};
        }
        this._fontCache[fontName] = true;
    };
    /**
     * 注销纹理字体
     * @param {string} fontName
     */
    FontManager.prototype.unregister = function (fontName) {
        if (this._fontCache && this._fontCache[fontName]) {
            delete this._fontCache[fontName];
        }
    };
    /**
     * 查看是否已经注册该字体
     * @param {string} fontName
     */
    FontManager.prototype.isRegister = function (fontName) {
        if (this._fontCache && this._fontCache[fontName]) {
            return true;
        }
        return null;
    };
    return FontManager;
}(BaseClass_1.default));
exports.default = FontManager;
},{"../base/BaseClass":4,"./Logger":26}],26:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var AppL_1 = require("../AppL");
/**
* Log工具类
* jhj
* 2018-11-11
* QQ:8510001
*/
var Logger = /** @class */ (function () {
    function Logger() {
    }
    Logger.trace = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        if (AppL_1.default.DebugUtils.isDebug) {
            console.log.apply(console, args);
        }
    };
    return Logger;
}());
exports.default = Logger;
},{"../AppL":3}],27:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var BaseClass_1 = require("../base/BaseClass");
/**
* Math工具类
* jhj
* 2018-11-11
* QQ:8510001
*/
var MathUtils = /** @class */ (function (_super) {
    __extends(MathUtils, _super);
    function MathUtils() {
        return _super.call(this) || this;
    }
    /**
     * 弧度制转换为角度值
     * @param {number} radian
     * @returns {number}
     */
    MathUtils.prototype.getAngle = function (radian) {
        return 180 * radian / Math.PI;
    };
    /**
     * 角度值转换为弧度制
     * @param {number} angle
     */
    MathUtils.prototype.getRadian = function (angle) {
        return angle / 180 * Math.PI;
    };
    /**
     * 获取两点间弧度
     * @param {Point} p1
     * @param {Point} p2
     * @returns {number}
     */
    MathUtils.prototype.getRadianTwoPoint = function (p1, p2) {
        var xdis = p2.x - p1.x;
        var ydis = p2.y - p1.y;
        return Math.atan2(ydis, xdis);
    };
    /**
     * 获取两点间旋转角度（顺时针）
     * @param {Point} p1
     * @param {Point} p2
     * @returns {number}
     */
    MathUtils.prototype.getAngleTwoPoint = function (p1, p2) {
        var vy = p2.y - p1.y;
        var vx = p2.x - p1.x;
        var ang;
        if (vy == 0) {
            if (vx < 0) {
                return 180;
            }
            return 0;
        }
        if (vx == 0) { //正切是vy/vx所以vx==0排除
            if (vy > 0) {
                ang = 90;
            }
            else if (vy < 0) {
                ang = 270;
            }
            return ang;
        }
        ang = this.getAngle(Math.atan(Math.abs(vy) / Math.abs(vx)));
        if (vx > 0) {
            if (vy < 0) {
                ang = 360 - ang;
            }
        }
        else {
            if (vy > 0) {
                ang = 180 - ang;
            }
            else {
                ang = 180 + ang;
            }
        }
        return ang;
    };
    /**
     * 获取两点间距离
     * @param {Point} p1
     * @param {Point} p2
     * @returns {number}
     */
    MathUtils.prototype.getDistance = function (p1, p2) {
        var disX = p2.x - p1.x;
        var disY = p2.y - p1.y;
        var disQ = Math.pow(disX, 2) + Math.pow(disY, 2);
        return Math.sqrt(disQ);
    };
    /**
     * 精确到小数点后多少位（舍尾）
     * @param {number} 精确值
     * @param {number} 精确位数
     * @return {number}
     * */
    MathUtils.prototype.exactCount = function (exactValue, count) {
        if (count === void 0) { count = 0; }
        var num = Math.pow(10, count);
        var value = (exactValue * num) | 0;
        return value / num;
    };
    /**
     * [0-1]区间获取二次贝塞尔曲线点切线角度
     * @param {Point} p0起点
     * @param {Point} p1控制点
     * @param {Point} p2终点
     * @param {number} t [0-1]区间
     * @return {number}
     * */
    MathUtils.prototype.getBezierCutAngle = function (p0, p1, p2, t) {
        var _x = 2 * (p0.x * (t - 1) + p1.x * (1 - 2 * t) + p2.x * t);
        var _y = 2 * (p0.y * (t - 1) + p1.y * (1 - 2 * t) + p2.y * t);
        var angle = this.getAngle(Math.atan2(_y, _x));
        return angle;
    };
    /**
     * [0-1]区间获取二次贝塞尔曲线上某点坐标
     * @param {Point} p0 起点
     * @param {Point} p1 控制点
     * @param {Point} p2 终点
     * @param {number} t [0-1]区间
     * @param {Point} 缓存的点对象，如不存在则生成新的点对象
     * @return {Laya.Point}
     * */
    MathUtils.prototype.getBezierPoint = function (p0, p1, p2, t, point) {
        if (point === void 0) { point = null; }
        if (!point) {
            point = new Laya.Point();
        }
        point.x = (1 - t) * (1 - t) * p0.x + 2 * t * (1 - t) * p1.x + t * t * p2.x;
        point.y = (1 - t) * (1 - t) * p0.y + 2 * t * (1 - t) * p1.y + t * t * p2.y;
        return point;
    };
    /**
     * [0-1]区间获取三次贝塞尔曲线上某点坐标
     * @param {Point} p0 起点
     * @param {Point} p1 控制点
     * @param {Point} p2 控制点
     * @param {Point} p3 终点
     * @param {number} t [0-1]区间
     * @param {Point} 缓存的点对象，如不存在则生成新的点对象
     * @return {Laya.Point}
     * */
    MathUtils.prototype.getBezier3Point = function (p0, p1, p2, p3, t, point) {
        if (point === void 0) { point = null; }
        if (!point) {
            point = new Laya.Point();
        }
        var cx = 3 * (p1.x - p0.x);
        var bx = 3 * (p2.x - p1.x) - cx;
        var ax = p3.x - p0.x - cx - bx;
        var cy = 3 * (p1.y - p0.y);
        var by = 3 * (p2.y - p1.y) - cy;
        var ay = p3.y - p0.y - cy - by;
        point.x = ax * t * t * t + bx * t * t + cx * t + p0.x;
        point.y = ay * t * t * t + by * t * t + cy * t + p0.y;
        return point;
    };
    /**
     * [0-1]区间获取三次贝塞尔曲线点切线角度
     * @param {Point} p0起点
     * @param {Point} p1控制点
     * @param {Point} p2控制点
     * @param {Point} p3终点
     * @param {number} t [0-1]区间
     * @return {number}
     * */
    MathUtils.prototype.getBezier3CutAngle = function (p0, p1, p2, p3, t) {
        var _x = p0.x * 3 * (1 - t) * (1 - t) * (-1) +
            3 * p1.x * ((1 - t) * (1 - t) + t * 2 * (1 - t) * (-1)) +
            3 * p2.x * (2 * t * (1 - t) + t * t * (-1)) +
            p3.x * 3 * t * t;
        var _y = p0.y * 3 * (1 - t) * (1 - t) * (-1) +
            3 * p1.y * ((1 - t) * (1 - t) + t * 2 * (1 - t) * (-1)) +
            3 * p2.y * (2 * t * (1 - t) + t * t * (-1)) +
            p3.y * 3 * t * t;
        var angle = this.getAngle(Math.atan2(_y, _x));
        return angle;
    };
    return MathUtils;
}(BaseClass_1.default));
exports.default = MathUtils;
},{"../base/BaseClass":4}],28:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var BaseClass_1 = require("../base/BaseClass");
/**
* Random工具类
* jhj
* 2018-11-11
* QQ:8510001
*/
var RandomUtils = /** @class */ (function (_super) {
    __extends(RandomUtils, _super);
    function RandomUtils() {
        return _super.call(this) || this;
    }
    /**
     * 获取一个区间的随机数 (from, end)
     * @param {number} from 最小值
     * @param {number} end 最大值
     * @returns {number}
     */
    RandomUtils.prototype.limit = function (from, end) {
        var min = Math.min(from, end);
        var max = Math.max(from, end);
        var range = max - min;
        return min + Math.random() * range;
    };
    /**
     * 在一个数组中随机获取一个元素
     * @param {Array} arr 数组
     * @returns 随机出来的结果
     */
    RandomUtils.prototype.randomArray = function (arr) {
        var index = (Math.random() * arr.length) | 0;
        return arr[index];
    };
    return RandomUtils;
}(BaseClass_1.default));
exports.default = RandomUtils;
},{"../base/BaseClass":4}],29:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var BaseClass_1 = require("../base/BaseClass");
var ResourceType_1 = require("../consts/ResourceType");
/**
* Resource工具类
* jhj
* 2018-11-11
* QQ:8510001
*/
var ResourceUtils = /** @class */ (function (_super) {
    __extends(ResourceUtils, _super);
    function ResourceUtils() {
        return _super.call(this) || this;
    }
    /**
     * 加载资源
     * @param {Array} resource: [{type: , url: }]
     * @param {Function} onResourceLoadComplete
     * @param {Function} onResourceLoadProgress
     * @param {any} onResourceLoadTarget
     */
    ResourceUtils.prototype.loadResource = function (resource, onResourceLoadComplete, onResourceLoadProgress, onResourceLoadTarget) {
        Laya.loader.load(resource, Laya.Handler.create(onResourceLoadTarget, onResourceLoadComplete), Laya.Handler.create(onResourceLoadTarget, onResourceLoadProgress, null, false));
    };
    /**
     * 获取资源加载地址
     * @param {string} host 一类型资源放置位置
     * @param {string} name 资源名字
     * @param {string} resType 资源类型，默认png（png|jpg|sk|fnt|txt|json|mp4|mp3|wav）
     */
    ResourceUtils.prototype.getUrl = function (host, name, resType) {
        if (resType === void 0) { resType = ResourceType_1.default.PNG; }
        return host + "/" + name + "." + resType;
    };
    return ResourceUtils;
}(BaseClass_1.default));
exports.default = ResourceUtils;
},{"../base/BaseClass":4,"../consts/ResourceType":6}],30:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var AppL_1 = require("../AppL");
var BaseClass_1 = require("../base/BaseClass");
/**
* Stage工具类
* jhj
* 2018-11-11
* QQ:8510001
*/
var StageUtils = /** @class */ (function (_super) {
    __extends(StageUtils, _super);
    function StageUtils() {
        return _super.call(this) || this;
    }
    /**
     * 初始化舞台
     * @param {boolean} isWebGL
     * @param {boolean} isDebug
     * @param {number} width
     * @param {number} height
     * @param {string} color
     */
    StageUtils.prototype.init = function (isWebGL, isDebug, width, height, color) {
        if (isWebGL === void 0) { isWebGL = true; }
        if (isDebug === void 0) { isDebug = AppL_1.default.DebugUtils.isDebug; }
        if (width === void 0) { width = 1334; }
        if (height === void 0) { height = 750; }
        if (color === void 0) { color = "#808080"; }
        //游戏舞台初始化渲染方式：WebGL和canvas（默认canvas）
        if (isWebGL) {
            Laya.init(width, height, Laya.WebGL);
        }
        else {
            Laya.init(width, height);
        }
        //debug显示
        (isDebug) && (Laya.Stat.show());
        //自动计算计算量较大，对性能有一定影响,默认为false
        Laya.stage.autoSize = false;
        //帧率类型，支持三种模式：fast-60帧(默认)，slow-30帧，mouse-30帧，但鼠标活动后会自动加速到60，鼠标不动2秒后降低为30帧，以节省消耗
        Laya.stage.frameRate = Laya.Stage.FRAME_SLOW;
        //游戏舞台区域对齐方式
        Laya.stage.alignV = Laya.Stage.ALIGN_MIDDLE;
        Laya.stage.alignH = Laya.Stage.ALIGN_CENTER;
        //"none"：不更改屏幕  "horizontal"：自动横屏  "vertical"：自动竖屏
        Laya.stage.screenMode = Laya.Stage.SCREEN_HORIZONTAL;
        //游戏舞台颜色
        Laya.stage.bgColor = color;
        //适配方式，完美适配(支持版本1.7.5)
        Laya.stage.scaleMode = Laya.Stage.SCALE_FIXED_AUTO;
    };
    Object.defineProperty(StageUtils.prototype, "stage", {
        /**
         * get stage
         */
        get: function () {
            return Laya.stage;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(StageUtils.prototype, "stageW", {
        /**
         * get stage width
         */
        get: function () {
            return Laya.stage.width;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(StageUtils.prototype, "stageH", {
        /**
         * get stage height
         */
        get: function () {
            return Laya.stage.height;
        },
        enumerable: true,
        configurable: true
    });
    return StageUtils;
}(BaseClass_1.default));
exports.default = StageUtils;
},{"../AppL":3,"../base/BaseClass":4}],31:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var BaseClass_1 = require("../base/BaseClass");
/**
* String工具类
* jhj
* 2018-11-11
* QQ:8510001
*/
var StringUtils = /** @class */ (function (_super) {
    __extends(StringUtils, _super);
    function StringUtils() {
        return _super.call(this) || this;
    }
    /**
     * 去掉前后空格
     * @param {string} str
     * @returns {string}
     */
    StringUtils.prototype.trimSpace = function (str) {
        return str.replace(/^\s*(.*?)[\s\n]*$/g, '$1');
    };
    /**
     * 获取字符串长度，中文为2
     * @param {string} str
     * @returns {number}
     */
    StringUtils.prototype.getLength = function (str) {
        var strArr = str.split("");
        var length = 0;
        for (var i = 0; i < strArr.length; i++) {
            var s = strArr[i];
            if (this.isChinese(s)) {
                length += 2;
            }
            else {
                length += 1;
            }
        }
        return length;
    };
    /**
     * 判断一个字符串是否包含中文
     * @param {string} str
     * @returns {boolean}
     */
    StringUtils.prototype.isChinese = function (str) {
        var reg = /^.*[\u4E00-\u9FA5]+.*$/;
        return reg.test(str);
    };
    /**
     * 将字符串（emoji表情）转换成16进制，Unicode编码存储是4个字节，两个2个字节组合
     *
     * @param {string} str
     */
    StringUtils.prototype.stringToCode16 = function (str) {
        var len = str.length;
        var codes = '';
        for (var i = 0; i < len; i++) {
            var code = str.charCodeAt(i).toString(16);
            codes += ';' + code;
        }
        return codes;
    };
    /**
     * 字节码，转换成unicode显示
     *
     * @param {string} str
     */
    StringUtils.prototype.code16ToString = function (str) {
        var uCodeStr = '';
        var strArr = str.split(';');
        for (var i = 0, len = strArr.length; i < len; i++) {
            var code = strArr[i];
            // ASCII补充高位
            var fillNum = 0;
            if (code.length < 4) {
                fillNum = 4 - code.length;
            }
            for (var k = 0; k < fillNum; k++) {
                code = '0' + code;
            }
            uCodeStr += '\\u' + code;
        }
        return uCodeStr;
    };
    /**
     * 指定截取字符长度，返回截取后的显示字符
     *
     * @param {string} str
     * @param {number} cutNum
     * @returns {string}
     */
    StringUtils.prototype.cutOutStr = function (str, cutNum) {
        var reg = /\uD83C[\uDF00-\uDFFF]|\uD83D[\uDC00-\uDE4F]/g;
        var len = 0;
        var index = 0;
        for (var i = 0; i < str.length; i++) {
            var code = str.charCodeAt(i).toString(16);
            var oldLen = len;
            var oldIndex = index;
            // 计算长度和当前字符串下标
            if (code.length > 2) {
                len += 2;
            }
            else {
                len += 1;
            }
            ++index;
            // 判断emoji表情，一个emoji表现显示空间当做2个（实际是4个字符）
            if (reg.test(str.substr(i, 2))) {
                ++i;
                ++index;
            }
            // 和截取长度判断
            if (len > cutNum) {
                index = oldIndex;
                len = oldLen;
                break;
            }
            else if (len == cutNum) {
                break;
            }
        }
        var retStr = str.substr(0, index);
        if (index < str.length) {
            retStr = retStr + '...';
        }
        return retStr;
    };
    return StringUtils;
}(BaseClass_1.default));
exports.default = StringUtils;
},{"../base/BaseClass":4}],32:[function(require,module,exports){
"use strict";
/*
* ControllerConst
* jhj
* 2018-11-11
* QQ:8510001
*/
Object.defineProperty(exports, "__esModule", { value: true });
var ControllerConst;
(function (ControllerConst) {
    // Loading = 10000,
    // Login,
    // Home,
    // Friend,
    // Shop,
    // Warehouse,
    // Factory,
    // Task,
    // Mail,
    // Game,
    // RpgGame,
    ControllerConst[ControllerConst["HOME"] = 1000] = "HOME";
})(ControllerConst = exports.ControllerConst || (exports.ControllerConst = {}));
},{}],33:[function(require,module,exports){
"use strict";
/*
* SceneConst
* jhj
* 2018-11-11
* QQ:8510001
*/
Object.defineProperty(exports, "__esModule", { value: true });
var SceneConst;
(function (SceneConst) {
    SceneConst[SceneConst["HOME"] = 1000] = "HOME";
    // /**
    //  * Game场景
    //  * @type {number}
    //  */
    // Game = 1,
    // /**
    //  * 游戏场景
    //  * @type {number}
    //  */
    // UI,
    // /**
    //  * Loading场景
    //  * @type {number}
    //  */
    // LOADING,
    // /**
    //  * RpgGame场景
    //  * @type {number}
    //  */
    // RpgGame,
})(SceneConst = exports.SceneConst || (exports.SceneConst = {}));
},{}],34:[function(require,module,exports){
"use strict";
/*
* ViewConst
* jhj
* 2018-11-11
* QQ:8510001
*/
Object.defineProperty(exports, "__esModule", { value: true });
var ViewConst;
(function (ViewConst) {
    ViewConst[ViewConst["HOME"] = 1000] = "HOME";
    // Loading = 10000,
    // Login,
    // Home,
    // Friend,
    // Shop,
    // Warehouse,
    // Factory,
    // Task,
    // Daily,
    // Mail,
    // Game = 20000,
    // GameUI,
    // RpgGame,
})(ViewConst = exports.ViewConst || (exports.ViewConst = {}));
},{}],35:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/*
* HomeController
* jhj
* 2018-11-11
* QQ:8510001
*/
var SceneConst_1 = require("./../../consts/SceneConst");
var AppL_1 = require("../../../core/AppL");
var BaseController_1 = require("../../../core/mvc/controller/BaseController");
var BaseProxy_1 = require("../../../core/mvc/proxy/BaseProxy");
var HomeView_1 = require("./HomeView");
var ViewConst_1 = require("../../consts/ViewConst");
var HomeController = /** @class */ (function (_super) {
    __extends(HomeController, _super);
    function HomeController() {
        var _this = _super.call(this) || this;
        _this.homeView = null;
        _this.homeProxy = null;
        _this.homeScene = null;
        _this._init();
        return _this;
    }
    HomeController.prototype._init = function () {
        this.homeScene = AppL_1.default.SceneManager.getScene(SceneConst_1.SceneConst.HOME);
        this.homeView = new HomeView_1.default(this, this.homeScene);
        AppL_1.default.ViewManager.register(ViewConst_1.ViewConst.HOME, this.homeView);
        this.homeProxy = new BaseProxy_1.default(this);
    };
    return HomeController;
}(BaseController_1.default));
exports.default = HomeController;
},{"../../../core/AppL":3,"../../../core/mvc/controller/BaseController":11,"../../../core/mvc/proxy/BaseProxy":12,"../../consts/ViewConst":34,"./../../consts/SceneConst":33,"./HomeView":36}],36:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var BaseView_1 = require("../../../core/mvc/view/BaseView");
/*
* HomeView
* jhj
* 2018-11-11
* QQ:8510001
*/
var HomeView = /** @class */ (function (_super) {
    __extends(HomeView, _super);
    function HomeView(controller, scene) {
        var _this = _super.call(this, controller, scene) || this;
        _this._btn = null;
        _this._btn2 = null;
        _this._btn3 = null;
        return _this;
    }
    HomeView.prototype.show = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        _super.prototype.show.apply(this, args);
        this.loadResource();
    };
    HomeView.prototype.initRes = function () {
        this.resouce = [
            { url: "res/comp.atlas", type: Laya.Loader.ATLAS },
            { url: "res/switchButton.atlas", type: Laya.Loader.ATLAS },
        ];
        _super.prototype.initRes.call(this);
    };
    HomeView.prototype.initView = function () {
        this._btn = new Laya.Button("comp/button.png", "第一个按钮");
        this._btn2 = new Laya.Button("comp/button.png", "第二个按钮");
        this._btn3 = new Laya.Button("comp/button.png", "第三个按钮");
        this._btn.pos(200, 100);
        this._btn2.pos(200, 300);
        this._btn3.pos(200, 500);
        this._btn.size(200, 100);
        this._btn2.size(200, 100);
        this._btn3.size(200, 100);
        this._btn.labelSize = 30;
        this._btn2.labelSize = 30;
        this._btn3.labelSize = 30;
        this.addChild(this._btn);
        this.addChild(this._btn2);
        this.addChild(this._btn3);
    };
    return HomeView;
}(BaseView_1.default));
exports.default = HomeView;
},{"../../../core/mvc/view/BaseView":14}],37:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var HomeController_1 = require("../module/home/HomeController");
var BaseScene_1 = require("../../core/mvc/scene/BaseScene");
var AppL_1 = require("../../core/AppL");
var ControllerConst_1 = require("../consts/ControllerConst");
var ViewConst_1 = require("../consts/ViewConst");
/*
* name;
*/
var HomeScene = /** @class */ (function (_super) {
    __extends(HomeScene, _super);
    function HomeScene() {
        return _super.call(this) || this;
    }
    /**
     * 进入Scene调用
     */
    HomeScene.prototype.onEnter = function () {
        _super.prototype.onEnter.call(this);
        //注册控制类
        AppL_1.default.ControllerManager.register(ControllerConst_1.ControllerConst.HOME, new HomeController_1.default());
        //控制显示view
        AppL_1.default.ViewManager.show(ViewConst_1.ViewConst.HOME, this);
    };
    /**
     * 退出Scene调用
     */
    HomeScene.prototype.onExit = function () {
        _super.prototype.onExit.call(this);
    };
    return HomeScene;
}(BaseScene_1.default));
exports.default = HomeScene;
},{"../../core/AppL":3,"../../core/mvc/scene/BaseScene":13,"../consts/ControllerConst":32,"../consts/ViewConst":34,"../module/home/HomeController":35}]},{},[2])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
